// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package config

import (
	"sync"
)

// Ensure, that MigrationMock does implement Migration.
// If this is not the case, regenerate this file with moq.
var _ Migration = &MigrationMock{}

// MigrationMock is a mock implementation of Migration.
//
//	func TestSomethingThatUsesMigration(t *testing.T) {
//
//		// make and configure a mocked Migration
//		mockedMigration := &MigrationMock{
//			DoFunc: func(config *Config) (bool, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedMigration in code that requires Migration
//		// and then make assertions.
//
//	}
type MigrationMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(config *Config) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Config is the config argument value.
			Config *Config
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *MigrationMock) Do(config *Config) (bool, error) {
	if mock.DoFunc == nil {
		panic("MigrationMock.DoFunc: method is nil but Migration.Do was just called")
	}
	callInfo := struct {
		Config *Config
	}{
		Config: config,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(config)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedMigration.DoCalls())
func (mock *MigrationMock) DoCalls() []struct {
	Config *Config
} {
	var calls []struct {
		Config *Config
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}
